@using Schedule.Web.ViewModels.TeacherAssignment
@model TeacherAssignmentViewModel

@{
    ViewData["Title"] = "Teacher and Classes";
}

<h1>@ViewData["Title"]</h1>

<style>
    table {
        font-family: arial, sans-serif;
        border-collapse: collapse;
        width: 100%;
    }

    td,
    th {
        border: 1px solid #dddddd;
        text-align: left;
        padding: 8px;
    }

    tr:nth-child(even) {
        background-color: #dddddd;
    }

    .sortable tr:hover {
        background-color: aqua;
        color: #fff;
    }

    .sortable-row-hover {
        background-color: aqua;
        color: #fff;
    }
</style>

<script>
    function allowDrop(event) {
        event.preventDefault();
    }

    function drag(event) {
        var draggedRow = event.target.closest('tr');
        // Clone the dragged row
        var clone = draggedRow.cloneNode(true);
        clone.classList.add('dragged');
        event.dataTransfer.setData("text", clone.outerHTML);
    }

    function drop(event) {
        event.preventDefault();
        var data = event.dataTransfer.getData("text");
        var table = event.target.closest('table');
        var tbody = table.querySelector('tbody');

        if (data && tbody) {
            tbody.insertAdjacentHTML('beforeend', data);
            // Remove the original row from the source table
            var originalTable = document.querySelector('.dragged').closest('table');
            originalTable.removeChild(originalTable.querySelector('.dragged'));
        }
    }

    function dragEnter(event) {
        event.target.closest('tr').classList.add('sortable-row-hover');
    }

    function dragLeave(event) {
        event.target.closest('tr').classList.remove('sortable-row-hover');
    }

    function dragEnd(event) {
        event.target.closest('tr').classList.remove('sortable-row-hover');
    }
</script>

@foreach (var teacher in Model.teacherAssignments)
{
    <div class="table-responsive">
        <table class="table sortable" id="@($"table-{teacher.Key}")" cellspacing="0" cellpadding="2" ondrop="drop(event)" ondragover="allowDrop(event)">
            <thead>
                <tr>
                    <th>@teacher.Key</th>
                </tr>
            </thead>
            <tbody>
                @for (var i = 0; i < teacher.Value.Count; i++)
                {
                    <tr draggable="true" ondragstart="drag(event)" ondragenter="dragEnter(event)" ondragleave="dragLeave(event)" ondragend="dragEnd(event)">
                        <td>
                            <div class="dragitem">@teacher.Value[i]</div>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}
