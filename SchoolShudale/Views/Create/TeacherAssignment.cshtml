@using Schedule.Web.ViewModels.TeacherAssignment
@model TeacherAssignmentViewModel

@{
    ViewData["Title"] = "Teacher and Classes";
}

<h1>@ViewData["Title"]</h1>

<style>
    table {
        font-family: arial, sans-serif;
        border-collapse: collapse;
        width: 100%;
    }

    td,
    th {
        border: 1px solid #dddddd;
        text-align: left;
        padding: 8px;
    }

    tr:nth-child(even) {
        background-color: #dddddd;
    }

    .sortable tr:hover {
        background-color: aqua;
        color: #fff;
    }

    .sortable-row-hover {
        background-color: aqua;
        color: #fff;
    }
</style>

<script>
    document.addEventListener('DOMContentLoaded', function () {
        var draggedItem = null;

        function allowDrop(event) {
            event.preventDefault();
        }

        function dragStart(event) {
            draggedItem = event.target.closest('tr');
            event.dataTransfer.effectAllowed = 'move';
            event.dataTransfer.setData('text/html', draggedItem.outerHTML);
        }

        function drop(event) {
            event.preventDefault();
            var targetTable = event.target.closest('table');
            var tbody = targetTable.querySelector('tbody');
            var data = event.dataTransfer.getData('text/html');

            if (targetTable && tbody && data) {
                // Append the cloned row to the target table
                tbody.insertAdjacentHTML('beforeend', data);

                // Remove the original row from the source table
                var sourceTable = draggedItem.closest('table');
                sourceTable.querySelector('tbody').removeChild(draggedItem);
            }

            draggedItem = null;
        }

        function dragEnter(event) {
            event.target.closest('tr').classList.add('sortable-row-hover');
        }

        function dragLeave(event) {
            event.target.closest('tr').classList.remove('sortable-row-hover');
        }

        function dragEnd(event) {
            event.target.closest('tr').classList.remove('sortable-row-hover');
        }

        var tables = document.querySelectorAll('.sortable');
        tables.forEach(function (table) {
            table.addEventListener('dragover', allowDrop);
            table.addEventListener('drop', drop);
        });

        var rows = document.querySelectorAll('.sortable tr');
        rows.forEach(function (row) {
            row.addEventListener('dragstart', dragStart);
            row.addEventListener('dragenter', dragEnter);
            row.addEventListener('dragleave', dragLeave);
            row.addEventListener('dragend', dragEnd);
        });
    });
</script>

@foreach (var teacher in Model.teacherAssignments)
{
    <div class="table-responsive">
        <table class="table sortable" id="@($"table-{teacher.Key}")" cellspacing="0" cellpadding="2">
            <thead>
                <tr>
                    <th>@teacher.Key</th>
                </tr>
            </thead>
            <tbody>
                @for (var i = 0; i < teacher.Value.Count; i++)
                {
                    <tr draggable="true">
                        <td>
                            <div class="dragitem">@teacher.Value[i]</div>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}
